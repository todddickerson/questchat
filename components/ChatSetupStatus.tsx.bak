"use client";

import { useEffect, useState } from "react";

interface ChatDiscoveryResult {
  success: boolean;
  chatId?: string;
  chatName?: string;
  error?: string;
  setupRequired?: boolean;
  instructions?: string[];
}

interface ChatSetupStatusProps {
  experienceId: string;
  onDiscoveryComplete?: (result: ChatDiscoveryResult) => void;
}

export default function ChatSetupStatus({ experienceId, onDiscoveryComplete }: ChatSetupStatusProps) {
  const [status, setStatus] = useState<ChatDiscoveryResult | null>(null);
  const [isDiscovering, setIsDiscovering] = useState(true);
  const [retryCount, setRetryCount] = useState(0);

  useEffect(() => {
    discoverChat();
  }, [experienceId]);

  const discoverChat = async () => {
    setIsDiscovering(true);
    console.log("[ChatSetupStatus] Starting auto-discovery for:", experienceId);
    
    try {
      const response = await fetch("/api/chat/auto-discover", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ experienceId })
      });
      
      const result = await response.json();
      console.log("[ChatSetupStatus] Discovery result:", result);
      
      setStatus(result);
      if (onDiscoveryComplete) {
        onDiscoveryComplete(result);
      }
    } catch (error) {
      console.error("[ChatSetupStatus] Discovery failed:", error);
      setStatus({
        success: false,
        error: "Failed to discover chat channel",
        setupRequired: true,
        instructions: [
          "Unable to connect to Whop API",
          "Please check your configuration"
        ]
      });
    } finally {
      setIsDiscovering(false);
    }
  };

  const handleRetry = () => {
    setRetryCount(retryCount + 1);
    discoverChat();
  };

  // Loading state
  if (isDiscovering) {
    return (
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 animate-pulse">
        <div className="flex items-center space-x-3">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
          <div>
            <h3 className="font-semibold text-blue-900">🔍 Discovering Chat Channel...</h3>
            <p className="text-sm text-blue-700 mt-1">
              QuestChat is automatically finding your chat channel
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Success state
  if (status?.success) {
    return (
      <div className="bg-green-50 border border-green-200 rounded-lg p-6">
        <div className="flex items-start space-x-3">
          <span className="text-2xl">✅</span>
          <div className="flex-1">
            <h3 className="font-semibold text-green-900">Chat Channel Connected!</h3>
            <p className="text-sm text-green-700 mt-1">
              QuestChat is ready to post daily prompts and track streaks
            </p>
            {status.chatId && (
              <div className="mt-3 p-2 bg-green-100 rounded">
                <code className="text-xs text-green-800">
                  Channel ID: {status.chatId}
                </code>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Error state with setup instructions
  if (status?.setupRequired) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <div className="flex items-start space-x-3">
          <span className="text-2xl">⚠️</span>
          <div className="flex-1">
            <h3 className="font-semibold text-red-900">Setup Required</h3>
            <p className="text-sm text-red-700 mt-1 mb-4">
              {status.error || "QuestChat needs to be configured"}
            </p>
            
            {status.instructions && status.instructions.length > 0 && (
              <div className="bg-white border border-red-100 rounded-lg p-4 mt-3">
                <h4 className="font-medium text-gray-900 mb-2">How to fix this:</h4>
                <ol className="space-y-2">
                  {status.instructions.map((instruction, idx) => (
                    <li key={idx} className="text-sm text-gray-700 flex">
                      <span className="text-red-500 mr-2">{idx + 1}.</span>
                      <span>{instruction.replace(/^\d+\.\s*/, '')}</span>
                    </li>
                  ))}
                </ol>
              </div>
            )}
            
            <button
              onClick={handleRetry}
              className="mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition"
            >
              🔄 Retry Discovery
            </button>
            
            {retryCount > 0 && (
              <p className="text-xs text-gray-500 mt-2">
                Retry attempt {retryCount}
              </p>
            )}
          </div>
        </div>
      </div>
    );
  }

  // Generic error state
  return (
    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
      <div className="flex items-start space-x-3">
        <span className="text-2xl">⚠️</span>
        <div className="flex-1">
          <h3 className="font-semibold text-yellow-900">Chat Setup Incomplete</h3>
          <p className="text-sm text-yellow-700 mt-1">
            {status?.error || "Unable to verify chat channel configuration"}
          </p>
          <button
            onClick={handleRetry}
            className="mt-3 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition"
          >
            🔄 Try Again
          </button>
        </div>
      </div>
    </div>
  );
}