// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  whopUserId   String   @unique
  username     String?
  createdAt    DateTime @default(now())
  
  // Relations
  streaks      Streak[]
  messages     MessageLog[]
  rewards      Reward[]
}

model Experience {
  id            String   @id @default(cuid())
  experienceId  String   @unique // exp_xxxx (chat experience)
  accessPassId  String?        // prod_xxxx (optional)
  name          String?
  createdAt     DateTime @default(now())
  
  // Relations
  config        Config?
  streaks       Streak[]
  quests        Quest[]
  messages      MessageLog[]
  rewards       Reward[]
}

model Config {
  id               String   @id @default(cuid())
  experienceId     String   @unique
  promptTimeUTC    String   // "09:00" (24h format)
  graceMinutes     Int      @default(90) // e.g., 90 minutes grace period
  rewardPercentage Int      @default(20) // e.g., 20% discount
  rewardStock      Int      @default(1)  // 1 (one-time use)
  rewardExpiryDays Int      @default(7)  // e.g., 7 days expiry
  minStreak3       Int      @default(3)  // 3-day streak threshold
  minStreak7       Int      @default(7)  // 7-day streak threshold
  questsJson       String   @default("[]") // JSON array of simple quests
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  experience Experience @relation(fields: [experienceId], references: [experienceId], onDelete: Cascade)
}

model Streak {
  id            String   @id @default(cuid())
  experienceId  String
  userId        String
  current       Int      @default(0)
  best          Int      @default(0)
  weekCount     Int      @default(0)
  lastPostAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience  Experience @relation(fields: [experienceId], references: [experienceId], onDelete: Cascade)

  @@unique([experienceId, userId])
}

model MessageLog {
  id            String   @id @default(cuid())
  experienceId  String
  userId        String
  dayKey        String   // YYYY-MM-DD format
  firstPostAt   DateTime
  createdAt     DateTime @default(now())
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience  Experience @relation(fields: [experienceId], references: [experienceId], onDelete: Cascade)
  
  @@unique([experienceId, userId, dayKey])
}

model Quest {
  id            String   @id @default(cuid())
  experienceId  String
  code          String
  title         String
  description   String
  createdAt     DateTime @default(now())
  
  // Relations
  experience  Experience @relation(fields: [experienceId], references: [experienceId], onDelete: Cascade)
}

model Reward {
  id            String   @id @default(cuid())
  experienceId  String
  userId        String
  type          String   // 'streak' | 'quest'
  threshold     Int?
  issuedCodeId  String?
  createdAt     DateTime @default(now())
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience  Experience @relation(fields: [experienceId], references: [experienceId], onDelete: Cascade)
}

model IssuedCode {
  id        String   @id @default(cuid())
  code      String   @unique
  promoId   String?
  expiresAt DateTime?
  createdAt DateTime @default(now())
}
